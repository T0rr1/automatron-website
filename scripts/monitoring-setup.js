#!/usr/bin/env node

/**
 * Monitoring and Alerting Setup Script
 * Configures monitoring services and creates alert rules
 */

const fs = require('fs');
const path = require('path');

// Monitoring configuration templates
const monitoringConfig = {
  // Vercel monitoring configuration
  vercel: {
    functions: {
      maxDuration: 30,
      memory: 1024
    },
    analytics: {
      enabled: true
    },
    speedInsights: {
      enabled: true
    }
  },
  
  // Sentry configuration
  sentry: {
    tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
    profilesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
    beforeSend: (event) => {
      // Filter out non-critical errors in production
      if (process.env.NODE_ENV === 'production') {
        if (event.exception?.values?.[0]?.type === 'ChunkLoadError') {
          return null; // Ignore chunk load errors
        }
      }
      return event;
    },
    integrations: [
      'BrowserTracing',
      'Replay'
    ],
    replaysSessionSampleRate: 0.1,
    replaysOnErrorSampleRate: 1.0
  },
  
  // Uptime monitoring endpoints
  uptimeChecks: [
    {
      name: 'Homepage',
      url: 'https://automatron.ai',
      method: 'GET',
      expectedStatus: 200,
      interval: '5m'
    },
    {
      name: 'Health Check',
      url: 'https://automatron.ai/api/health',
      method: 'GET',
      expectedStatus: 200,
      interval: '2m'
    },
    {
      name: 'Contact API',
      url: 'https://automatron.ai/api/contact',
      method: 'HEAD',
      expectedStatus: 405, // Method not allowed for HEAD
      interval: '10m'
    },
    {
      name: 'Spanish Homepage',
      url: 'https://automatron.ai/es',
      method: 'GET',
      expectedStatus: 200,
      interval: '10m'
    }
  ],
  
  // Performance thresholds
  performance: {
    lighthouse: {
      performance: 90,
      accessibility: 95,
      bestPractices: 90,
      seo: 95
    },
    coreWebVitals: {
      lcp: 2000, // Largest Contentful Paint (ms)
      fid: 100,  // First Input Delay (ms)
      cls: 0.1   // Cumulative Layout Shift
    },
    responseTime: {
      p50: 500,  // 50th percentile (ms)
      p95: 1000, // 95th percentile (ms)
      p99: 2000  // 99th percentile (ms)
    }
  },
  
  // Alert rules
  alerts: [
    {
      name: 'Site Down',
      condition: 'uptime < 99%',
      severity: 'critical',
      channels: ['email', 'slack']
    },
    {
      name: 'High Error Rate',
      condition: 'error_rate > 5%',
      severity: 'high',
      channels: ['email']
    },
    {
      name: 'Slow Response Time',
      condition: 'response_time_p95 > 2000ms',
      severity: 'medium',
      channels: ['slack']
    },
    {
      name: 'Performance Degradation',
      condition: 'lighthouse_performance < 80',
      severity: 'medium',
      channels: ['slack']
    }
  ]
};

function generateSentryConfig() {
  const sentryConfig = `// Sentry Configuration
// This file is auto-generated by monitoring-setup.js

import * as Sentry from '@sentry/nextjs';

const SENTRY_DSN = process.env.NEXT_PUBLIC_SENTRY_DSN;

if (SENTRY_DSN) {
  Sentry.init({
    dsn: SENTRY_DSN,
    tracesSampleRate: ${monitoringConfig.sentry.tracesSampleRate},
    profilesSampleRate: ${monitoringConfig.sentry.profilesSampleRate},
    
    // Performance monitoring
    integrations: [
      new Sentry.BrowserTracing({
        tracePropagationTargets: [
          'localhost',
          /^https:\\/\\/automatron\\.ai/,
        ],
      }),
      new Sentry.Replay({
        maskAllText: true,
        blockAllMedia: true,
      }),
    ],
    
    // Session replay
    replaysSessionSampleRate: ${monitoringConfig.sentry.replaysSessionSampleRate},
    replaysOnErrorSampleRate: ${monitoringConfig.sentry.replaysOnErrorSampleRate},
    
    // Environment configuration
    environment: process.env.NODE_ENV,
    
    // Error filtering
    beforeSend(event) {
      // Filter out non-critical errors in production
      if (process.env.NODE_ENV === 'production') {
        if (event.exception?.values?.[0]?.type === 'ChunkLoadError') {
          return null;
        }
        if (event.exception?.values?.[0]?.type === 'ResizeObserver loop limit exceeded') {
          return null;
        }
      }
      return event;
    },
    
    // Release tracking
    release: process.env.VERCEL_GIT_COMMIT_SHA,
  });
}

export default Sentry;`;

  fs.writeFileSync(
    path.join(__dirname, '../src/lib/sentry.ts'),
    sentryConfig
  );
}

function generateUptimeConfig() {
  const uptimeConfig = {
    version: '1.0',
    checks: monitoringConfig.uptimeChecks,
    notifications: {
      email: {
        enabled: true,
        recipients: [
          process.env.CONTACT_EMAIL || 'alerts@automatron.ai'
        ]
      },
      webhook: {
        enabled: true,
        url: process.env.WEBHOOK_URL || 'https://hooks.slack.com/services/...'
      }
    },
    settings: {
      timezone: 'UTC',
      retryCount: 3,
      retryDelay: 30
    }
  };
  
  fs.writeFileSync(
    path.join(__dirname, '../monitoring/uptime-config.json'),
    JSON.stringify(uptimeConfig, null, 2)
  );
}

function generateAlertingRules() {
  const alertRules = `# Alerting Rules for Automatron.ai
# These rules can be imported into monitoring services like Grafana, DataDog, etc.

groups:
  - name: automatron-website
    rules:
      ${monitoringConfig.alerts.map(alert => `
      - alert: ${alert.name.replace(/\s+/g, '')}
        expr: ${alert.condition}
        for: 5m
        labels:
          severity: ${alert.severity}
          service: automatron-website
        annotations:
          summary: "${alert.name} detected"
          description: "Alert condition: ${alert.condition}"
          runbook_url: "https://github.com/automatron-ai/website/wiki/runbooks"
      `).join('')}

# Performance monitoring queries
performance_queries:
  - name: response_time_p95
    query: 'histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))'
  
  - name: error_rate
    query: 'rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) * 100'
  
  - name: uptime
    query: 'up{job="automatron-website"} * 100'

# Dashboard configuration
dashboards:
  - name: "Automatron Website Overview"
    panels:
      - title: "Response Time"
        type: "graph"
        targets: ["response_time_p95"]
      
      - title: "Error Rate"
        type: "singlestat"
        targets: ["error_rate"]
      
      - title: "Uptime"
        type: "singlestat"
        targets: ["uptime"]
      
      - title: "Core Web Vitals"
        type: "graph"
        targets: ["lcp", "fid", "cls"]`;

  fs.writeFileSync(
    path.join(__dirname, '../monitoring/alert-rules.yml'),
    alertRules
  );
}

function createMonitoringDashboard() {
  const dashboardConfig = {
    dashboard: {
      title: "Automatron.ai Website Monitoring",
      tags: ["automatron", "website", "production"],
      timezone: "UTC",
      panels: [
        {
          title: "Site Uptime",
          type: "stat",
          targets: [
            {
              expr: "up{job='automatron-website'} * 100",
              legendFormat: "Uptime %"
            }
          ],
          thresholds: [
            { color: "red", value: 95 },
            { color: "yellow", value: 99 },
            { color: "green", value: 99.5 }
          ]
        },
        {
          title: "Response Time",
          type: "graph",
          targets: [
            {
              expr: "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket[5m]))",
              legendFormat: "p50"
            },
            {
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
              legendFormat: "p95"
            }
          ]
        },
        {
          title: "Error Rate",
          type: "graph",
          targets: [
            {
              expr: "rate(http_requests_total{status=~'5..'}[5m]) / rate(http_requests_total[5m]) * 100",
              legendFormat: "5xx Error Rate"
            }
          ]
        },
        {
          title: "Core Web Vitals",
          type: "graph",
          targets: [
            {
              expr: "web_vitals_lcp",
              legendFormat: "LCP (ms)"
            },
            {
              expr: "web_vitals_fid",
              legendFormat: "FID (ms)"
            },
            {
              expr: "web_vitals_cls * 1000",
              legendFormat: "CLS (x1000)"
            }
          ]
        }
      ]
    }
  };
  
  fs.writeFileSync(
    path.join(__dirname, '../monitoring/dashboard.json'),
    JSON.stringify(dashboardConfig, null, 2)
  );
}

function main() {
  console.log('ðŸ”§ Setting up monitoring and alerting...');
  
  // Create monitoring directory
  const monitoringDir = path.join(__dirname, '../monitoring');
  if (!fs.existsSync(monitoringDir)) {
    fs.mkdirSync(monitoringDir, { recursive: true });
  }
  
  // Generate configuration files
  generateSentryConfig();
  generateUptimeConfig();
  generateAlertingRules();
  createMonitoringDashboard();
  
  console.log('âœ… Monitoring setup complete!');
  console.log('ðŸ“‹ Next steps:');
  console.log('  1. Configure Sentry project and add DSN to environment variables');
  console.log('  2. Set up uptime monitoring service (UptimeRobot, Pingdom, etc.)');
  console.log('  3. Import alert rules into your monitoring platform');
  console.log('  4. Configure notification channels (Slack, email, etc.)');
  console.log('  5. Import dashboard configuration into Grafana/DataDog');
}

if (require.main === module) {
  main();
}

module.exports = {
  monitoringConfig,
  generateSentryConfig,
  generateUptimeConfig,
  generateAlertingRules,
  createMonitoringDashboard
};